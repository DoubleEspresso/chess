

#ifndef SQUARES_MG_H
#define SQUARES_MG_H


#include "../../types.h"
#include "../../utils.h"


namespace Evaluation {


	namespace {
		static const int mg_scores[6][64] =
		{
			{
				// pawns
				-10, -10, -10, -10,  -10,  -10,  -10, -10,
				 10,  10,  10, -10,  -10,   10,   10,  10,
				 -2,  -2,  -2,   4,    4,   -2,   -2,  -2,
				  0,   0,   0,   8,    8,    0,    0,   0,
				  4,   6,   8,   10,  10,    8,    6,   4,
				  6,   8,   10,  10,  10,   10,    8,   6,
				  8,  10,   10,  10,  10,   10,   10,   8,
				 10,  10,   10,  10,  10,   10,   10,  10,
			},

			{
				// knights
				-10, -10, -10,  -10,  -10,  -10,  -10,  -10,
				-10,  -8,  -8,   -4,   -4,   -8,   -8,  -10,
				-10,  -2,   6,    6,    6,    6,   -2,  -10,
				-10,  -2,   8,    8,    8,    8,   -2,  -10,
				-10,  -2,   10,  10,   10,   10,   -2,  -10,
				-10,  -2,   6,   10,   10,    6,   -2,  -10,
				-10,  -8,  -8,   -4,   -4,   -8,   -8,  -10,
				-10, -10, -10,  -10,  -10,  -10,  -10,  -10,
			},

			{
				// bishops
				 -5, -10, -10,  -10,  -10,  -10,  -10,   -5,
				-10,   0,  -8,   -4,   -4,   -8,   -8,  -10,
				-10,  -2,   2,    6,    6,    2,   -2,  -10,
				-10,  -2,   6,   10,   10,    6,   -2,  -10,
				-10,  -2,   8,   10,   10,    8,   -2,  -10,
				-10,  -2,   0,    0,    0,    0,   -2,  -10,
				-10, -10, -10,  -10,  -10,  -10,  -10,  -10,
				-10, -10, -10,  -10,  -10,  -10,  -10,  -10,
			},

			{
				// rooks
				-4,   2,   6,   10,   10,   6,    2,   -4,
				-4,   2,   6,   10,   10,   6,    2,   -4,
				-4,   2,   6,   10,   10,   6,    2,   -4,
				-4,   2,   6,   10,   10,   6,    2,   -4,
				-4,   2,   6,   10,   10,   6,    2,   -4,
				-4,   2,   6,   10,   10,   6,    2,   -4,
				 8,   8,   8,   10,   10,   8,    8,    8,
				-4,   2,   6,   10,   10,   6,    2,   -4,
			},

			{
				// queens
				-10, -10, -10,  -10,  -10,  -10,  -10,  -10,
				-10,  -4,  -4,   -4,   -4,   -4,   -4,  -10,
				-10,  -2,   4,    6,    6,    4,   -4,  -10,
				-10,  -2,   8,   10,   10,    8,   -2,  -10,
				-10,  -2,   8,   10,   10,    8,   -2,  -10,
				-10,  -2,   6,   10,   10,    6,   -2,  -10,
				-10,  -2,   2,    6,    6,    2,   -4,  -10,
				-10, -10, -10,  -10,  -10,  -10,  -10,  -10,
			},

			{
				// kings
				-2,  -2,  8,   -10,  -10,  -10,   8,  -2,
				-4,  -4,  -4,  -10,  -10,  -10,  -4,  -4,
				-6,  -6,  -6,  -6,   -6,   -6,   -6,  -6,
				-8,  -8,  -8,  -8,   -8,   -8,   -8,  -8,
				-10, -10, -10, -10,  -10,  -10,  -10, -10,
				-10, -10, -10, -10,  -10,  -10,  -10, -10,
				-10, -10, -10, -10,  -10,  -10,  -10, -10,
				-10, -10, -10, -10,  -10,  -10,  -10, -10,
			}
		};


		inline int mg_square_score(const Piece& p, const Color& c, const Square& s) {
			if (c == white)
				return mg_scores[p][s];
			return mg_scores[p][56 - 8 * util::row(s) + util::col(s)];
		}

		template<Color c> inline int mg_square_score(const Piece& p, const Square& s);


		template<> int mg_square_score<black>(const Piece& p, const Square& s) {
			return mg_scores[p][56 - 8 * util::row(s) + util::col(s)];
		}


		template<> int mg_square_score<white>(const Piece& p, const Square& s) {
			return mg_scores[p][s];
		}
	}

#endif


}
